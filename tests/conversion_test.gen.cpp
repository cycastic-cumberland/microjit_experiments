
// This file is automatically generated

#include <random>
#include <gtest/gtest.h>
#include <microjit/orchestrator.h>

class PrimitiveConversionTestFixture : public ::testing::Test {
private:
    microjit::Ref<microjit::OrchestratorComponent<microjit::MicroJITCompiler_x86_64, microjit::ThreadSafeObject>> orchestrator{};
    std::random_device device{};
    std::mt19937 rng{device()};
public:
    void SetUp() override {
        orchestrator = microjit::orchestrator();
    }
    void TearDown() override {
        orchestrator = microjit::Ref<microjit::OrchestratorComponent<microjit::MicroJITCompiler_x86_64, microjit::ThreadSafeObject>>::null();
    }
    bool test_uint8_t_to_uint16_t() {
        std::uniform_int_distribution<uint8_t> dis(0, 255U);
        auto from_val = dis(rng);
        static const std::function<uint16_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<uint8_t>();
        main_scope->construct_from_immediate<uint8_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<uint16_t>();
        main_scope->convert<uint8_t, uint16_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (uint16_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_uint8_t_to_uint32_t() {
        std::uniform_int_distribution<uint8_t> dis(0, 255U);
        auto from_val = dis(rng);
        static const std::function<uint32_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<uint8_t>();
        main_scope->construct_from_immediate<uint8_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<uint32_t>();
        main_scope->convert<uint8_t, uint32_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (uint32_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_uint8_t_to_uint64_t() {
        std::uniform_int_distribution<uint8_t> dis(0, 255U);
        auto from_val = dis(rng);
        static const std::function<uint64_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<uint8_t>();
        main_scope->construct_from_immediate<uint8_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<uint64_t>();
        main_scope->convert<uint8_t, uint64_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (uint64_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_uint8_t_to_int8_t() {
        std::uniform_int_distribution<uint8_t> dis(0, 255U);
        auto from_val = dis(rng);
        static const std::function<int8_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<uint8_t>();
        main_scope->construct_from_immediate<uint8_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<int8_t>();
        main_scope->convert<uint8_t, int8_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (int8_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_uint8_t_to_int16_t() {
        std::uniform_int_distribution<uint8_t> dis(0, 255U);
        auto from_val = dis(rng);
        static const std::function<int16_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<uint8_t>();
        main_scope->construct_from_immediate<uint8_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<int16_t>();
        main_scope->convert<uint8_t, int16_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (int16_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_uint8_t_to_int32_t() {
        std::uniform_int_distribution<uint8_t> dis(0, 255U);
        auto from_val = dis(rng);
        static const std::function<int32_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<uint8_t>();
        main_scope->construct_from_immediate<uint8_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<int32_t>();
        main_scope->convert<uint8_t, int32_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (int32_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_uint8_t_to_int64_t() {
        std::uniform_int_distribution<uint8_t> dis(0, 255U);
        auto from_val = dis(rng);
        static const std::function<int64_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<uint8_t>();
        main_scope->construct_from_immediate<uint8_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<int64_t>();
        main_scope->convert<uint8_t, int64_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (int64_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_uint8_t_to_float() {
        std::uniform_int_distribution<uint8_t> dis(0, 255U);
        auto from_val = dis(rng);
        static const std::function<float()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<uint8_t>();
        main_scope->construct_from_immediate<uint8_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<float>();
        main_scope->convert<uint8_t, float>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (float)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_uint8_t_to_double() {
        std::uniform_int_distribution<uint8_t> dis(0, 255U);
        auto from_val = dis(rng);
        static const std::function<double()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<uint8_t>();
        main_scope->construct_from_immediate<uint8_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<double>();
        main_scope->convert<uint8_t, double>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (double)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_uint16_t_to_uint8_t() {
        std::uniform_int_distribution<uint16_t> dis(0, 65535U);
        auto from_val = dis(rng);
        static const std::function<uint8_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<uint16_t>();
        main_scope->construct_from_immediate<uint16_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<uint8_t>();
        main_scope->convert<uint16_t, uint8_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (uint8_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_uint16_t_to_uint32_t() {
        std::uniform_int_distribution<uint16_t> dis(0, 65535U);
        auto from_val = dis(rng);
        static const std::function<uint32_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<uint16_t>();
        main_scope->construct_from_immediate<uint16_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<uint32_t>();
        main_scope->convert<uint16_t, uint32_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (uint32_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_uint16_t_to_uint64_t() {
        std::uniform_int_distribution<uint16_t> dis(0, 65535U);
        auto from_val = dis(rng);
        static const std::function<uint64_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<uint16_t>();
        main_scope->construct_from_immediate<uint16_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<uint64_t>();
        main_scope->convert<uint16_t, uint64_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (uint64_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_uint16_t_to_int8_t() {
        std::uniform_int_distribution<uint16_t> dis(0, 65535U);
        auto from_val = dis(rng);
        static const std::function<int8_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<uint16_t>();
        main_scope->construct_from_immediate<uint16_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<int8_t>();
        main_scope->convert<uint16_t, int8_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (int8_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_uint16_t_to_int16_t() {
        std::uniform_int_distribution<uint16_t> dis(0, 65535U);
        auto from_val = dis(rng);
        static const std::function<int16_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<uint16_t>();
        main_scope->construct_from_immediate<uint16_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<int16_t>();
        main_scope->convert<uint16_t, int16_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (int16_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_uint16_t_to_int32_t() {
        std::uniform_int_distribution<uint16_t> dis(0, 65535U);
        auto from_val = dis(rng);
        static const std::function<int32_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<uint16_t>();
        main_scope->construct_from_immediate<uint16_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<int32_t>();
        main_scope->convert<uint16_t, int32_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (int32_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_uint16_t_to_int64_t() {
        std::uniform_int_distribution<uint16_t> dis(0, 65535U);
        auto from_val = dis(rng);
        static const std::function<int64_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<uint16_t>();
        main_scope->construct_from_immediate<uint16_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<int64_t>();
        main_scope->convert<uint16_t, int64_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (int64_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_uint16_t_to_float() {
        std::uniform_int_distribution<uint16_t> dis(0, 65535U);
        auto from_val = dis(rng);
        static const std::function<float()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<uint16_t>();
        main_scope->construct_from_immediate<uint16_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<float>();
        main_scope->convert<uint16_t, float>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (float)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_uint16_t_to_double() {
        std::uniform_int_distribution<uint16_t> dis(0, 65535U);
        auto from_val = dis(rng);
        static const std::function<double()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<uint16_t>();
        main_scope->construct_from_immediate<uint16_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<double>();
        main_scope->convert<uint16_t, double>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (double)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_uint32_t_to_uint8_t() {
        std::uniform_int_distribution<uint32_t> dis(0, 4294967295U);
        auto from_val = dis(rng);
        static const std::function<uint8_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<uint32_t>();
        main_scope->construct_from_immediate<uint32_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<uint8_t>();
        main_scope->convert<uint32_t, uint8_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (uint8_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_uint32_t_to_uint16_t() {
        std::uniform_int_distribution<uint32_t> dis(0, 4294967295U);
        auto from_val = dis(rng);
        static const std::function<uint16_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<uint32_t>();
        main_scope->construct_from_immediate<uint32_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<uint16_t>();
        main_scope->convert<uint32_t, uint16_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (uint16_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_uint32_t_to_uint64_t() {
        std::uniform_int_distribution<uint32_t> dis(0, 4294967295U);
        auto from_val = dis(rng);
        static const std::function<uint64_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<uint32_t>();
        main_scope->construct_from_immediate<uint32_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<uint64_t>();
        main_scope->convert<uint32_t, uint64_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (uint64_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_uint32_t_to_int8_t() {
        std::uniform_int_distribution<uint32_t> dis(0, 4294967295U);
        auto from_val = dis(rng);
        static const std::function<int8_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<uint32_t>();
        main_scope->construct_from_immediate<uint32_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<int8_t>();
        main_scope->convert<uint32_t, int8_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (int8_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_uint32_t_to_int16_t() {
        std::uniform_int_distribution<uint32_t> dis(0, 4294967295U);
        auto from_val = dis(rng);
        static const std::function<int16_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<uint32_t>();
        main_scope->construct_from_immediate<uint32_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<int16_t>();
        main_scope->convert<uint32_t, int16_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (int16_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_uint32_t_to_int32_t() {
        std::uniform_int_distribution<uint32_t> dis(0, 4294967295U);
        auto from_val = dis(rng);
        static const std::function<int32_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<uint32_t>();
        main_scope->construct_from_immediate<uint32_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<int32_t>();
        main_scope->convert<uint32_t, int32_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (int32_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_uint32_t_to_int64_t() {
        std::uniform_int_distribution<uint32_t> dis(0, 4294967295U);
        auto from_val = dis(rng);
        static const std::function<int64_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<uint32_t>();
        main_scope->construct_from_immediate<uint32_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<int64_t>();
        main_scope->convert<uint32_t, int64_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (int64_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_uint32_t_to_float() {
        std::uniform_int_distribution<uint32_t> dis(0, 4294967295U);
        auto from_val = dis(rng);
        static const std::function<float()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<uint32_t>();
        main_scope->construct_from_immediate<uint32_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<float>();
        main_scope->convert<uint32_t, float>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (float)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_uint32_t_to_double() {
        std::uniform_int_distribution<uint32_t> dis(0, 4294967295U);
        auto from_val = dis(rng);
        static const std::function<double()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<uint32_t>();
        main_scope->construct_from_immediate<uint32_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<double>();
        main_scope->convert<uint32_t, double>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (double)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_uint64_t_to_uint8_t() {
        std::uniform_int_distribution<uint64_t> dis(0, 18446744073709551615U);
        auto from_val = dis(rng);
        static const std::function<uint8_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<uint64_t>();
        main_scope->construct_from_immediate<uint64_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<uint8_t>();
        main_scope->convert<uint64_t, uint8_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (uint8_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_uint64_t_to_uint16_t() {
        std::uniform_int_distribution<uint64_t> dis(0, 18446744073709551615U);
        auto from_val = dis(rng);
        static const std::function<uint16_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<uint64_t>();
        main_scope->construct_from_immediate<uint64_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<uint16_t>();
        main_scope->convert<uint64_t, uint16_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (uint16_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_uint64_t_to_uint32_t() {
        std::uniform_int_distribution<uint64_t> dis(0, 18446744073709551615U);
        auto from_val = dis(rng);
        static const std::function<uint32_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<uint64_t>();
        main_scope->construct_from_immediate<uint64_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<uint32_t>();
        main_scope->convert<uint64_t, uint32_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (uint32_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_uint64_t_to_int8_t() {
        std::uniform_int_distribution<uint64_t> dis(0, 18446744073709551615U);
        auto from_val = dis(rng);
        static const std::function<int8_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<uint64_t>();
        main_scope->construct_from_immediate<uint64_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<int8_t>();
        main_scope->convert<uint64_t, int8_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (int8_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_uint64_t_to_int16_t() {
        std::uniform_int_distribution<uint64_t> dis(0, 18446744073709551615U);
        auto from_val = dis(rng);
        static const std::function<int16_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<uint64_t>();
        main_scope->construct_from_immediate<uint64_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<int16_t>();
        main_scope->convert<uint64_t, int16_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (int16_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_uint64_t_to_int32_t() {
        std::uniform_int_distribution<uint64_t> dis(0, 18446744073709551615U);
        auto from_val = dis(rng);
        static const std::function<int32_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<uint64_t>();
        main_scope->construct_from_immediate<uint64_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<int32_t>();
        main_scope->convert<uint64_t, int32_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (int32_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_uint64_t_to_int64_t() {
        std::uniform_int_distribution<uint64_t> dis(0, 18446744073709551615U);
        auto from_val = dis(rng);
        static const std::function<int64_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<uint64_t>();
        main_scope->construct_from_immediate<uint64_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<int64_t>();
        main_scope->convert<uint64_t, int64_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (int64_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_uint64_t_to_float() {
        std::uniform_int_distribution<uint64_t> dis(0, 18446744073709551615U);
        auto from_val = dis(rng);
        static const std::function<float()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<uint64_t>();
        main_scope->construct_from_immediate<uint64_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<float>();
        main_scope->convert<uint64_t, float>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (float)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_uint64_t_to_double() {
        std::uniform_int_distribution<uint64_t> dis(0, 18446744073709551615U);
        auto from_val = dis(rng);
        static const std::function<double()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<uint64_t>();
        main_scope->construct_from_immediate<uint64_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<double>();
        main_scope->convert<uint64_t, double>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (double)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_int8_t_to_uint8_t() {
        std::uniform_int_distribution<int8_t> dis(-127, 127);
        auto from_val = dis(rng);
        static const std::function<uint8_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<int8_t>();
        main_scope->construct_from_immediate<int8_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<uint8_t>();
        main_scope->convert<int8_t, uint8_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (uint8_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_int8_t_to_uint16_t() {
        std::uniform_int_distribution<int8_t> dis(-127, 127);
        auto from_val = dis(rng);
        static const std::function<uint16_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<int8_t>();
        main_scope->construct_from_immediate<int8_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<uint16_t>();
        main_scope->convert<int8_t, uint16_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (uint16_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_int8_t_to_uint32_t() {
        std::uniform_int_distribution<int8_t> dis(-127, 127);
        auto from_val = dis(rng);
        static const std::function<uint32_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<int8_t>();
        main_scope->construct_from_immediate<int8_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<uint32_t>();
        main_scope->convert<int8_t, uint32_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (uint32_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_int8_t_to_uint64_t() {
        std::uniform_int_distribution<int8_t> dis(-127, 127);
        auto from_val = dis(rng);
        static const std::function<uint64_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<int8_t>();
        main_scope->construct_from_immediate<int8_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<uint64_t>();
        main_scope->convert<int8_t, uint64_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (uint64_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_int8_t_to_int16_t() {
        std::uniform_int_distribution<int8_t> dis(-127, 127);
        auto from_val = dis(rng);
        static const std::function<int16_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<int8_t>();
        main_scope->construct_from_immediate<int8_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<int16_t>();
        main_scope->convert<int8_t, int16_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (int16_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_int8_t_to_int32_t() {
        std::uniform_int_distribution<int8_t> dis(-127, 127);
        auto from_val = dis(rng);
        static const std::function<int32_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<int8_t>();
        main_scope->construct_from_immediate<int8_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<int32_t>();
        main_scope->convert<int8_t, int32_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (int32_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_int8_t_to_int64_t() {
        std::uniform_int_distribution<int8_t> dis(-127, 127);
        auto from_val = dis(rng);
        static const std::function<int64_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<int8_t>();
        main_scope->construct_from_immediate<int8_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<int64_t>();
        main_scope->convert<int8_t, int64_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (int64_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_int8_t_to_float() {
        std::uniform_int_distribution<int8_t> dis(-127, 127);
        auto from_val = dis(rng);
        static const std::function<float()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<int8_t>();
        main_scope->construct_from_immediate<int8_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<float>();
        main_scope->convert<int8_t, float>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (float)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_int8_t_to_double() {
        std::uniform_int_distribution<int8_t> dis(-127, 127);
        auto from_val = dis(rng);
        static const std::function<double()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<int8_t>();
        main_scope->construct_from_immediate<int8_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<double>();
        main_scope->convert<int8_t, double>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (double)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_int16_t_to_uint8_t() {
        std::uniform_int_distribution<int16_t> dis(-32767, 32767);
        auto from_val = dis(rng);
        static const std::function<uint8_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<int16_t>();
        main_scope->construct_from_immediate<int16_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<uint8_t>();
        main_scope->convert<int16_t, uint8_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (uint8_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_int16_t_to_uint16_t() {
        std::uniform_int_distribution<int16_t> dis(-32767, 32767);
        auto from_val = dis(rng);
        static const std::function<uint16_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<int16_t>();
        main_scope->construct_from_immediate<int16_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<uint16_t>();
        main_scope->convert<int16_t, uint16_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (uint16_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_int16_t_to_uint32_t() {
        std::uniform_int_distribution<int16_t> dis(-32767, 32767);
        auto from_val = dis(rng);
        static const std::function<uint32_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<int16_t>();
        main_scope->construct_from_immediate<int16_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<uint32_t>();
        main_scope->convert<int16_t, uint32_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (uint32_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_int16_t_to_uint64_t() {
        std::uniform_int_distribution<int16_t> dis(-32767, 32767);
        auto from_val = dis(rng);
        static const std::function<uint64_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<int16_t>();
        main_scope->construct_from_immediate<int16_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<uint64_t>();
        main_scope->convert<int16_t, uint64_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (uint64_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_int16_t_to_int8_t() {
        std::uniform_int_distribution<int16_t> dis(-32767, 32767);
        auto from_val = dis(rng);
        static const std::function<int8_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<int16_t>();
        main_scope->construct_from_immediate<int16_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<int8_t>();
        main_scope->convert<int16_t, int8_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (int8_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_int16_t_to_int32_t() {
        std::uniform_int_distribution<int16_t> dis(-32767, 32767);
        auto from_val = dis(rng);
        static const std::function<int32_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<int16_t>();
        main_scope->construct_from_immediate<int16_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<int32_t>();
        main_scope->convert<int16_t, int32_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (int32_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_int16_t_to_int64_t() {
        std::uniform_int_distribution<int16_t> dis(-32767, 32767);
        auto from_val = dis(rng);
        static const std::function<int64_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<int16_t>();
        main_scope->construct_from_immediate<int16_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<int64_t>();
        main_scope->convert<int16_t, int64_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (int64_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_int16_t_to_float() {
        std::uniform_int_distribution<int16_t> dis(-32767, 32767);
        auto from_val = dis(rng);
        static const std::function<float()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<int16_t>();
        main_scope->construct_from_immediate<int16_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<float>();
        main_scope->convert<int16_t, float>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (float)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_int16_t_to_double() {
        std::uniform_int_distribution<int16_t> dis(-32767, 32767);
        auto from_val = dis(rng);
        static const std::function<double()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<int16_t>();
        main_scope->construct_from_immediate<int16_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<double>();
        main_scope->convert<int16_t, double>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (double)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_int32_t_to_uint8_t() {
        std::uniform_int_distribution<int32_t> dis(-2147483647, 2147483647);
        auto from_val = dis(rng);
        static const std::function<uint8_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<int32_t>();
        main_scope->construct_from_immediate<int32_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<uint8_t>();
        main_scope->convert<int32_t, uint8_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (uint8_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_int32_t_to_uint16_t() {
        std::uniform_int_distribution<int32_t> dis(-2147483647, 2147483647);
        auto from_val = dis(rng);
        static const std::function<uint16_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<int32_t>();
        main_scope->construct_from_immediate<int32_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<uint16_t>();
        main_scope->convert<int32_t, uint16_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (uint16_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_int32_t_to_uint32_t() {
        std::uniform_int_distribution<int32_t> dis(-2147483647, 2147483647);
        auto from_val = dis(rng);
        static const std::function<uint32_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<int32_t>();
        main_scope->construct_from_immediate<int32_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<uint32_t>();
        main_scope->convert<int32_t, uint32_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (uint32_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_int32_t_to_uint64_t() {
        std::uniform_int_distribution<int32_t> dis(-2147483647, 2147483647);
        auto from_val = dis(rng);
        static const std::function<uint64_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<int32_t>();
        main_scope->construct_from_immediate<int32_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<uint64_t>();
        main_scope->convert<int32_t, uint64_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (uint64_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_int32_t_to_int8_t() {
        std::uniform_int_distribution<int32_t> dis(-2147483647, 2147483647);
        auto from_val = dis(rng);
        static const std::function<int8_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<int32_t>();
        main_scope->construct_from_immediate<int32_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<int8_t>();
        main_scope->convert<int32_t, int8_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (int8_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_int32_t_to_int16_t() {
        std::uniform_int_distribution<int32_t> dis(-2147483647, 2147483647);
        auto from_val = dis(rng);
        static const std::function<int16_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<int32_t>();
        main_scope->construct_from_immediate<int32_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<int16_t>();
        main_scope->convert<int32_t, int16_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (int16_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_int32_t_to_int64_t() {
        std::uniform_int_distribution<int32_t> dis(-2147483647, 2147483647);
        auto from_val = dis(rng);
        static const std::function<int64_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<int32_t>();
        main_scope->construct_from_immediate<int32_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<int64_t>();
        main_scope->convert<int32_t, int64_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (int64_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_int32_t_to_float() {
        std::uniform_int_distribution<int32_t> dis(-2147483647, 2147483647);
        auto from_val = dis(rng);
        static const std::function<float()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<int32_t>();
        main_scope->construct_from_immediate<int32_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<float>();
        main_scope->convert<int32_t, float>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (float)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_int32_t_to_double() {
        std::uniform_int_distribution<int32_t> dis(-2147483647, 2147483647);
        auto from_val = dis(rng);
        static const std::function<double()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<int32_t>();
        main_scope->construct_from_immediate<int32_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<double>();
        main_scope->convert<int32_t, double>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (double)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_int64_t_to_uint8_t() {
        std::uniform_int_distribution<int64_t> dis(-9223372036854775807, 9223372036854775807);
        auto from_val = dis(rng);
        static const std::function<uint8_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<int64_t>();
        main_scope->construct_from_immediate<int64_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<uint8_t>();
        main_scope->convert<int64_t, uint8_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (uint8_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_int64_t_to_uint16_t() {
        std::uniform_int_distribution<int64_t> dis(-9223372036854775807, 9223372036854775807);
        auto from_val = dis(rng);
        static const std::function<uint16_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<int64_t>();
        main_scope->construct_from_immediate<int64_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<uint16_t>();
        main_scope->convert<int64_t, uint16_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (uint16_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_int64_t_to_uint32_t() {
        std::uniform_int_distribution<int64_t> dis(-9223372036854775807, 9223372036854775807);
        auto from_val = dis(rng);
        static const std::function<uint32_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<int64_t>();
        main_scope->construct_from_immediate<int64_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<uint32_t>();
        main_scope->convert<int64_t, uint32_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (uint32_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_int64_t_to_uint64_t() {
        std::uniform_int_distribution<int64_t> dis(-9223372036854775807, 9223372036854775807);
        auto from_val = dis(rng);
        static const std::function<uint64_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<int64_t>();
        main_scope->construct_from_immediate<int64_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<uint64_t>();
        main_scope->convert<int64_t, uint64_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (uint64_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_int64_t_to_int8_t() {
        std::uniform_int_distribution<int64_t> dis(-9223372036854775807, 9223372036854775807);
        auto from_val = dis(rng);
        static const std::function<int8_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<int64_t>();
        main_scope->construct_from_immediate<int64_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<int8_t>();
        main_scope->convert<int64_t, int8_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (int8_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_int64_t_to_int16_t() {
        std::uniform_int_distribution<int64_t> dis(-9223372036854775807, 9223372036854775807);
        auto from_val = dis(rng);
        static const std::function<int16_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<int64_t>();
        main_scope->construct_from_immediate<int64_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<int16_t>();
        main_scope->convert<int64_t, int16_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (int16_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_int64_t_to_int32_t() {
        std::uniform_int_distribution<int64_t> dis(-9223372036854775807, 9223372036854775807);
        auto from_val = dis(rng);
        static const std::function<int32_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<int64_t>();
        main_scope->construct_from_immediate<int64_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<int32_t>();
        main_scope->convert<int64_t, int32_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (int32_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_int64_t_to_float() {
        std::uniform_int_distribution<int64_t> dis(-9223372036854775807, 9223372036854775807);
        auto from_val = dis(rng);
        static const std::function<float()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<int64_t>();
        main_scope->construct_from_immediate<int64_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<float>();
        main_scope->convert<int64_t, float>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (float)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_int64_t_to_double() {
        std::uniform_int_distribution<int64_t> dis(-9223372036854775807, 9223372036854775807);
        auto from_val = dis(rng);
        static const std::function<double()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<int64_t>();
        main_scope->construct_from_immediate<int64_t>(var_from, from_val);
        auto var_to = main_scope->create_variable<double>();
        main_scope->convert<int64_t, double>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (double)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_float_to_uint8_t() {
        static constexpr float from_val = 3.14159265358979323846;
        static const std::function<uint8_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<float>();
        main_scope->construct_from_immediate<float>(var_from, from_val);
        auto var_to = main_scope->create_variable<uint8_t>();
        main_scope->convert<float, uint8_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (uint8_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_float_to_uint16_t() {
        static constexpr float from_val = 3.14159265358979323846;
        static const std::function<uint16_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<float>();
        main_scope->construct_from_immediate<float>(var_from, from_val);
        auto var_to = main_scope->create_variable<uint16_t>();
        main_scope->convert<float, uint16_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (uint16_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_float_to_uint32_t() {
        static constexpr float from_val = 3.14159265358979323846;
        static const std::function<uint32_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<float>();
        main_scope->construct_from_immediate<float>(var_from, from_val);
        auto var_to = main_scope->create_variable<uint32_t>();
        main_scope->convert<float, uint32_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (uint32_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_float_to_uint64_t() {
        static constexpr float from_val = 3.14159265358979323846;
        static const std::function<uint64_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<float>();
        main_scope->construct_from_immediate<float>(var_from, from_val);
        auto var_to = main_scope->create_variable<uint64_t>();
        main_scope->convert<float, uint64_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (uint64_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_float_to_int8_t() {
        static constexpr float from_val = 3.14159265358979323846;
        static const std::function<int8_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<float>();
        main_scope->construct_from_immediate<float>(var_from, from_val);
        auto var_to = main_scope->create_variable<int8_t>();
        main_scope->convert<float, int8_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (int8_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_float_to_int16_t() {
        static constexpr float from_val = 3.14159265358979323846;
        static const std::function<int16_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<float>();
        main_scope->construct_from_immediate<float>(var_from, from_val);
        auto var_to = main_scope->create_variable<int16_t>();
        main_scope->convert<float, int16_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (int16_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_float_to_int32_t() {
        static constexpr float from_val = 3.14159265358979323846;
        static const std::function<int32_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<float>();
        main_scope->construct_from_immediate<float>(var_from, from_val);
        auto var_to = main_scope->create_variable<int32_t>();
        main_scope->convert<float, int32_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (int32_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_float_to_int64_t() {
        static constexpr float from_val = 3.14159265358979323846;
        static const std::function<int64_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<float>();
        main_scope->construct_from_immediate<float>(var_from, from_val);
        auto var_to = main_scope->create_variable<int64_t>();
        main_scope->convert<float, int64_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (int64_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_float_to_double() {
        static constexpr float from_val = 3.14159265358979323846;
        static const std::function<double()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<float>();
        main_scope->construct_from_immediate<float>(var_from, from_val);
        auto var_to = main_scope->create_variable<double>();
        main_scope->convert<float, double>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (double)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_double_to_uint8_t() {
        static constexpr double from_val = 3.14159265358979323846;
        static const std::function<uint8_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<double>();
        main_scope->construct_from_immediate<double>(var_from, from_val);
        auto var_to = main_scope->create_variable<uint8_t>();
        main_scope->convert<double, uint8_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (uint8_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_double_to_uint16_t() {
        static constexpr double from_val = 3.14159265358979323846;
        static const std::function<uint16_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<double>();
        main_scope->construct_from_immediate<double>(var_from, from_val);
        auto var_to = main_scope->create_variable<uint16_t>();
        main_scope->convert<double, uint16_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (uint16_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_double_to_uint32_t() {
        static constexpr double from_val = 3.14159265358979323846;
        static const std::function<uint32_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<double>();
        main_scope->construct_from_immediate<double>(var_from, from_val);
        auto var_to = main_scope->create_variable<uint32_t>();
        main_scope->convert<double, uint32_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (uint32_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_double_to_uint64_t() {
        static constexpr double from_val = 3.14159265358979323846;
        static const std::function<uint64_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<double>();
        main_scope->construct_from_immediate<double>(var_from, from_val);
        auto var_to = main_scope->create_variable<uint64_t>();
        main_scope->convert<double, uint64_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (uint64_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_double_to_int8_t() {
        static constexpr double from_val = 3.14159265358979323846;
        static const std::function<int8_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<double>();
        main_scope->construct_from_immediate<double>(var_from, from_val);
        auto var_to = main_scope->create_variable<int8_t>();
        main_scope->convert<double, int8_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (int8_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_double_to_int16_t() {
        static constexpr double from_val = 3.14159265358979323846;
        static const std::function<int16_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<double>();
        main_scope->construct_from_immediate<double>(var_from, from_val);
        auto var_to = main_scope->create_variable<int16_t>();
        main_scope->convert<double, int16_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (int16_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_double_to_int32_t() {
        static constexpr double from_val = 3.14159265358979323846;
        static const std::function<int32_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<double>();
        main_scope->construct_from_immediate<double>(var_from, from_val);
        auto var_to = main_scope->create_variable<int32_t>();
        main_scope->convert<double, int32_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (int32_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_double_to_int64_t() {
        static constexpr double from_val = 3.14159265358979323846;
        static const std::function<int64_t()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<double>();
        main_scope->construct_from_immediate<double>(var_from, from_val);
        auto var_to = main_scope->create_variable<int64_t>();
        main_scope->convert<double, int64_t>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (int64_t)from_val;
        instance.detach();
        return to_val == cpp_val;
    }

    bool test_double_to_float() {
        static constexpr double from_val = 3.14159265358979323846;
        static const std::function<float()> model{};
        auto instance = orchestrator->create_instance_from_model(model);
        auto function = instance->get_function();
        auto main_scope = function->get_main_scope();
        auto var_from = main_scope->create_variable<double>();
        main_scope->construct_from_immediate<double>(var_from, from_val);
        auto var_to = main_scope->create_variable<float>();
        main_scope->convert<double, float>(var_from, var_to);
        main_scope->function_return(var_to);
        auto to_val = instance();
        auto cpp_val = (float)from_val;
        instance.detach();
        return to_val == cpp_val;
    }


};
TEST_F(PrimitiveConversionTestFixture, PrimitiveConversionTest) {
    EXPECT_TRUE(test_uint8_t_to_uint16_t());
    EXPECT_TRUE(test_uint8_t_to_uint32_t());
    EXPECT_TRUE(test_uint8_t_to_uint64_t());
    EXPECT_TRUE(test_uint8_t_to_int8_t());
    EXPECT_TRUE(test_uint8_t_to_int16_t());
    EXPECT_TRUE(test_uint8_t_to_int32_t());
    EXPECT_TRUE(test_uint8_t_to_int64_t());
    EXPECT_TRUE(test_uint8_t_to_float());
    EXPECT_TRUE(test_uint8_t_to_double());
    EXPECT_TRUE(test_uint16_t_to_uint8_t());
    EXPECT_TRUE(test_uint16_t_to_uint32_t());
    EXPECT_TRUE(test_uint16_t_to_uint64_t());
    EXPECT_TRUE(test_uint16_t_to_int8_t());
    EXPECT_TRUE(test_uint16_t_to_int16_t());
    EXPECT_TRUE(test_uint16_t_to_int32_t());
    EXPECT_TRUE(test_uint16_t_to_int64_t());
    EXPECT_TRUE(test_uint16_t_to_float());
    EXPECT_TRUE(test_uint16_t_to_double());
    EXPECT_TRUE(test_uint32_t_to_uint8_t());
    EXPECT_TRUE(test_uint32_t_to_uint16_t());
    EXPECT_TRUE(test_uint32_t_to_uint64_t());
    EXPECT_TRUE(test_uint32_t_to_int8_t());
    EXPECT_TRUE(test_uint32_t_to_int16_t());
    EXPECT_TRUE(test_uint32_t_to_int32_t());
    EXPECT_TRUE(test_uint32_t_to_int64_t());
    EXPECT_TRUE(test_uint32_t_to_float());
    EXPECT_TRUE(test_uint32_t_to_double());
    EXPECT_TRUE(test_uint64_t_to_uint8_t());
    EXPECT_TRUE(test_uint64_t_to_uint16_t());
    EXPECT_TRUE(test_uint64_t_to_uint32_t());
    EXPECT_TRUE(test_uint64_t_to_int8_t());
    EXPECT_TRUE(test_uint64_t_to_int16_t());
    EXPECT_TRUE(test_uint64_t_to_int32_t());
    EXPECT_TRUE(test_uint64_t_to_int64_t());
    EXPECT_TRUE(test_uint64_t_to_float());
    EXPECT_TRUE(test_uint64_t_to_double());
    EXPECT_TRUE(test_int8_t_to_uint8_t());
    EXPECT_TRUE(test_int8_t_to_uint16_t());
    EXPECT_TRUE(test_int8_t_to_uint32_t());
    EXPECT_TRUE(test_int8_t_to_uint64_t());
    EXPECT_TRUE(test_int8_t_to_int16_t());
    EXPECT_TRUE(test_int8_t_to_int32_t());
    EXPECT_TRUE(test_int8_t_to_int64_t());
    EXPECT_TRUE(test_int8_t_to_float());
    EXPECT_TRUE(test_int8_t_to_double());
    EXPECT_TRUE(test_int16_t_to_uint8_t());
    EXPECT_TRUE(test_int16_t_to_uint16_t());
    EXPECT_TRUE(test_int16_t_to_uint32_t());
    EXPECT_TRUE(test_int16_t_to_uint64_t());
    EXPECT_TRUE(test_int16_t_to_int8_t());
    EXPECT_TRUE(test_int16_t_to_int32_t());
    EXPECT_TRUE(test_int16_t_to_int64_t());
    EXPECT_TRUE(test_int16_t_to_float());
    EXPECT_TRUE(test_int16_t_to_double());
    EXPECT_TRUE(test_int32_t_to_uint8_t());
    EXPECT_TRUE(test_int32_t_to_uint16_t());
    EXPECT_TRUE(test_int32_t_to_uint32_t());
    EXPECT_TRUE(test_int32_t_to_uint64_t());
    EXPECT_TRUE(test_int32_t_to_int8_t());
    EXPECT_TRUE(test_int32_t_to_int16_t());
    EXPECT_TRUE(test_int32_t_to_int64_t());
    EXPECT_TRUE(test_int32_t_to_float());
    EXPECT_TRUE(test_int32_t_to_double());
    EXPECT_TRUE(test_int64_t_to_uint8_t());
    EXPECT_TRUE(test_int64_t_to_uint16_t());
    EXPECT_TRUE(test_int64_t_to_uint32_t());
    EXPECT_TRUE(test_int64_t_to_uint64_t());
    EXPECT_TRUE(test_int64_t_to_int8_t());
    EXPECT_TRUE(test_int64_t_to_int16_t());
    EXPECT_TRUE(test_int64_t_to_int32_t());
    EXPECT_TRUE(test_int64_t_to_float());
    EXPECT_TRUE(test_int64_t_to_double());
    EXPECT_TRUE(test_float_to_uint8_t());
    EXPECT_TRUE(test_float_to_uint16_t());
    EXPECT_TRUE(test_float_to_uint32_t());
    EXPECT_TRUE(test_float_to_uint64_t());
    EXPECT_TRUE(test_float_to_int8_t());
    EXPECT_TRUE(test_float_to_int16_t());
    EXPECT_TRUE(test_float_to_int32_t());
    EXPECT_TRUE(test_float_to_int64_t());
    EXPECT_TRUE(test_float_to_double());
    EXPECT_TRUE(test_double_to_uint8_t());
    EXPECT_TRUE(test_double_to_uint16_t());
    EXPECT_TRUE(test_double_to_uint32_t());
    EXPECT_TRUE(test_double_to_uint64_t());
    EXPECT_TRUE(test_double_to_int8_t());
    EXPECT_TRUE(test_double_to_int16_t());
    EXPECT_TRUE(test_double_to_int32_t());
    EXPECT_TRUE(test_double_to_int64_t());
    EXPECT_TRUE(test_double_to_float());

}
